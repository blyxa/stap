    MakeCli.addMethod(MethodMeta("writeAvro", List("clusterName", "topicName", "schemaFilePath", "key", "recordJson"),
      args=>{ context(args("clusterName"),(o,kf)=>{
        val res = kf.writeAvro(args("topicName"),args("schemaFilePath"),args("key"),args("recordJson"))
        o.out(s"Record sent to topic[${res.topic()}] offset[${res.offset()}] partition[${res.partition()}]")
      })}
    ))
    MakeCli.addMethod(MethodMeta("deleteTopic", List("clusterName","topicName"),
      args=>{ context(args("clusterName"),(o,kf)=>{
        kf.deleteTopic(args("topicName"))
        o.out(s"Request topic[${args("topicName")}] deletion. ${Ansi.ansi().fgBrightRed().a("(* might need to enable deleting topic. check [delete.topic.enable] property)").reset()}")
      })}
    ))
    MakeCli.addMethod(MethodMeta("createTopic", List("clusterName","topicName","partitions","replicationFactor","configs"),
      args=>{ context(args("clusterName"),(o,kf)=>{
        val (t, config,replicas) = kf.createTopic(CreateTopic(
          args("topicName"), args("partitions").toInt, args("replicationFactor").toShort,Map()
        ))
        o.out(s"topic created name[${t.name()}] id[${t.topicId()}]")
      })}
    ))
